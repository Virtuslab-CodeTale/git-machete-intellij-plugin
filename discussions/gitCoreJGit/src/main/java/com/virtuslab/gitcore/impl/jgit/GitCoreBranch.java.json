[
  {
    "id" : "6f867beb-c329-4278-bbe1-bc6f81ad3659",
    "prId" : 286,
    "prUrl" : "https://github.com/VirtusLab/git-machete-intellij-plugin/pull/286#pullrequestreview-413098068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ecc8cc9-ac24-47aa-82c6-b66aa9f4816f",
        "parentId" : null,
        "authorId" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "body" : "Btw I've just added https://github.com/typetools/checker-framework/issues/3313 (`Feature request: @AlwaysUnique (?) to mark classes whose instances must always be @Unique`)",
        "createdAt" : "2020-05-16T18:25:22Z",
        "updatedAt" : "2020-05-19T17:53:42Z",
        "lastEditedBy" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1be8ef0798a27800cae2fd5e07e7625fcf51874",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +72,76 @@  // - narrow the scope where a RevCommit is available; a use as a field is strongly discouraged.\n  // This comment applies everywhere in the codebase.\n  // Note that both points are kind-of enforced by Checkstyle (every occurrence of \"RevCommit\" must be preceded with Checker's @Unique annotation),\n  // but this is not perfect - for instance, it doesn't catch RevCommits declared as `var`s.\n  protected @Unique RevCommit resolveRevCommit(String revStr) throws GitCoreException {"
  },
  {
    "id" : "238f699b-84e0-481e-8768-72c80afba8e0",
    "prId" : 245,
    "prUrl" : "https://github.com/VirtusLab/git-machete-intellij-plugin/pull/245#pullrequestreview-412140683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55e378f5-d2a4-43e9-8221-a7bcdecbe7c9",
        "parentId" : null,
        "authorId" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "body" : "Ditto, `AtomicReference` likely unneeded given that the method is synchronized",
        "createdAt" : "2020-05-14T17:42:31Z",
        "updatedAt" : "2020-05-14T23:51:59Z",
        "lastEditedBy" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "tags" : [
        ]
      },
      {
        "id" : "79b739d0-a018-4929-ae7d-124de9df8e06",
        "parentId" : "55e378f5-d2a4-43e9-8221-a7bcdecbe7c9",
        "authorId" : "d8774f13-a544-44d7-9cf3-69a9d1083f1f",
        "body" : "will be resolved on #281 ",
        "createdAt" : "2020-05-14T20:00:10Z",
        "updatedAt" : "2020-05-14T23:51:59Z",
        "lastEditedBy" : "d8774f13-a544-44d7-9cf3-69a9d1083f1f",
        "tags" : [
        ]
      }
    ],
    "commit" : "472e051e9ef335247ef201e1c7051e56191b5a71",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +58,62 @@  @Override\n  public synchronized GitCoreCommit getPointedCommit() throws GitCoreException {\n    var gitCoreCommit = pointedCommitRef.get();\n    if (gitCoreCommit == null) {\n      GitCoreCommit value = new GitCoreCommit(derivePointedRevCommit());"
  },
  {
    "id" : "b638b81a-30d2-4fb2-9617-d032a30e543d",
    "prId" : 245,
    "prUrl" : "https://github.com/VirtusLab/git-machete-intellij-plugin/pull/245#pullrequestreview-412140637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "763df2a2-0e03-4b34-9fb5-3080575d1831",
        "parentId" : null,
        "authorId" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "body" : "I can see other places where `derivePointedRevCommit` is invoked... like in `deriveCommitsUntil`; but I don't think it should be called anywhere but just in this very line. `getPointedCommit` should be used instead to avoid double derivation. Also, for the same reason, `derivePointedRevCommit` can probably be private now.",
        "createdAt" : "2020-05-14T17:44:28Z",
        "updatedAt" : "2020-05-14T23:51:59Z",
        "lastEditedBy" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "tags" : [
        ]
      },
      {
        "id" : "5b114d4c-dc84-44dd-b89b-2485ba7743f8",
        "parentId" : "763df2a2-0e03-4b34-9fb5-3080575d1831",
        "authorId" : "d8774f13-a544-44d7-9cf3-69a9d1083f1f",
        "body" : "issue #281 created",
        "createdAt" : "2020-05-14T20:00:06Z",
        "updatedAt" : "2020-05-14T23:51:59Z",
        "lastEditedBy" : "d8774f13-a544-44d7-9cf3-69a9d1083f1f",
        "tags" : [
        ]
      }
    ],
    "commit" : "472e051e9ef335247ef201e1c7051e56191b5a71",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +60,64 @@    var gitCoreCommit = pointedCommitRef.get();\n    if (gitCoreCommit == null) {\n      GitCoreCommit value = new GitCoreCommit(derivePointedRevCommit());\n      pointedCommitRef.set(value);\n      return value;"
  },
  {
    "id" : "091c9d81-0bed-4b91-87b9-86b2d7123dee",
    "prId" : 130,
    "prUrl" : "https://github.com/VirtusLab/git-machete-intellij-plugin/pull/130#pullrequestreview-376978563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c046e512-505d-410f-8207-9118ffb62215",
        "parentId" : null,
        "authorId" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "body" : "Nice :)",
        "createdAt" : "2020-03-18T16:01:33Z",
        "updatedAt" : "2020-03-20T07:31:28Z",
        "lastEditedBy" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "615646ae7fffae540b823dc888c37938a169cf57",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +127,131 @@\n    return Iterator.ofAll(revWalk)\n        .takeUntil(revCommit -> revCommit.getId().getName().equals(upToCommit.getHash().getHashString()))\n        .map(GitCoreCommit::new)\n        .collect(List.collector());"
  },
  {
    "id" : "54304a4d-61e8-485c-9cf9-0e15d64c76e3",
    "prId" : 130,
    "prUrl" : "https://github.com/VirtusLab/git-machete-intellij-plugin/pull/130#pullrequestreview-378040165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fd5f6dd-c7b4-4b1e-8917-66aa1068d30c",
        "parentId" : null,
        "authorId" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "body" : "Maybe drop a comment that you're basically looking for a first repeated element in the list (IIUC)\r\n",
        "createdAt" : "2020-03-19T19:44:49Z",
        "updatedAt" : "2020-03-20T07:31:28Z",
        "lastEditedBy" : "1cbc94b1-89bf-4adc-8c1f-ad39035845fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "615646ae7fffae540b823dc888c37938a169cf57",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +110,114 @@        .map(RevCommit::getParents)\n        .flatMap(Stream::of)\n        .find(e -> !ancestorsOfStartCommits.add(e))\n        .<IGitCoreCommit>map(GitCoreCommit::new)\n        .toJavaOptional();"
  }
]